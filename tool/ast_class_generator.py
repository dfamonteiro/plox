from typing import List
from pathlib import Path

def defineAst(output_dir : str, base_name : str, types : List[str]):
    target = Path(output_dir) / Path(base_name.lower() + ".py")

    with open(target, "w") as f:
        f.write("\n".join(
            [
                "# Autogenerated file",
                "",
                "from token import Token",
                "",
                f"class {base_name}:",
                ""
            ])
        )

        for i in types:

            f.write(gen_class(base_name, i))

def gen_class(base_name : str, production : str) -> str:
    INDENT = " " * 4

    class_name, fields_str = map(lambda s: s.strip(), production.split(":"))

    fields = list(map(lambda s: s.strip().split(), fields_str.split(",")))

    code = [INDENT + f"class {class_name}({base_name}):"]

    for _type, name in fields:
        code.append(
            INDENT * 2 + f"{name} : {_type}"
        )
    
    code.append("")

    init_params = ', '.join([name + ' : ' + _type for _type, name in fields])

    init = INDENT * 2 + f"def __init__(self, {init_params}):"

    code.append(init)

    for _type, name in fields:
        code.append(
            INDENT * 3 + f"self.{name} = {name}"
        )

    code.append("\n\n")
    return "\n".join(code)


if __name__ == "__main__":
    defineAst(".", "Expr", 
        [
            "Binary   : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Unary    : Token operator, Expr right"
        ]
    )